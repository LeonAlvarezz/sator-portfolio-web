import type { Metadata } from "next";
import { NextIntlClientProvider } from "next-intl";
import "@/public/style/globals.css";
import "@/public/style/tiptap.scss";
import "react-photo-view/dist/react-photo-view.css";
import {
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar/sidebar";
import { AppSidebar } from "@/components/ui/sidebar/app-sidebar";
import ThemeProviders from "@/context/theme-provider";

import { Inter as _font } from "next/font/google";
import { cn } from "@/lib/utils";
import { Toaster } from "@/components/ui/toaster";
import Navbar from "@/components/ui/nav";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import { getMessages, setRequestLocale } from "next-intl/server";
const font = _font({ subsets: ["latin"] });

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;
  if (!routing.locales.includes(locale as never)) {
    notFound();
  }
  // Enable static rendering
  setRequestLocale(locale);
  const messages = await getMessages();

  return (
    <html lang={locale} className="dark" data-theme="dark">
      <body
        // className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        className={cn(font.className)}
      >
        <NextIntlClientProvider messages={messages}>
          <ThemeProviders>
            <SidebarProvider className="relative flex flex-1">
              <AppSidebar />
              <main className="w-full overflow-hidden">
                <Navbar
                  sidebarTrigger={<SidebarTrigger />}
                  currentLocale={locale}
                />
                {children}
                <Toaster />
              </main>
            </SidebarProvider>
          </ThemeProviders>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
